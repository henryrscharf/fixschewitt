#########################
## HENRY SCHARF        ##
## UPDATED: 11/19/2014 ##
#########################


load("~/Google Drive/statistics/bicycle_sharing/citibike_new_york/arrivals_attributes.RData")

## Want to subset the data. Pick random ids?
n <- 7
set.seed(1985)
subset.id <- sample(unique(arrivals$id), size = n)
subset.index <- c(sapply(X = subset.id,
                         FUN = function(x) {
                             which(arrivals$id == x)
                         }))
arrivals.sub <- arrivals[subset.index, ]
arrivals.single <- arrivals[arrivals$id == subset.id[1], ]

## Want to subset the data. Pick busiest ids?
library(foreach)
library(doParallel)
registerDoParallel(cl = 4)
mean.arrivals <- foreach(i = unique(arrivals$id),
                         .inorder = FALSE,
                         .combine = "c") %dopar%
                 mean(arrivals$arrivals[arrivals$id == i])
## qplot(x = mean.arrivals) +
##     geom_histogram(color = "gray")

n <- 7
subset.mean <- sort(mean.arrivals, decreasing = TRUE)[1:n]
subset.id <- unique(arrivals$id)[rowSums(sapply(X = subset.mean,
                                                FUN = function(x) {
                                                    mean.arrivals == x
                                                }))==1]
subset.index <- c(sapply(X = subset.id,
                         FUN = function(x) {
                             which(arrivals$id == x)
                         }))
arrivals.sub <- arrivals[subset.index, ]
arrivals.single <- arrivals[arrivals$id == subset.id[1], ]

library(ggmap)
theme_set(theme_bw(16))
lower.manhat <- qmap(location = c(mean(arrivals.sub$longitude),
                         mean(arrivals.sub$latitude)),
                     ## source = "stamen",
                     ## maptype = "toner",
                     zoom = 13,
                     color = "bw")
lower.manhat +
    geom_point(aes(x = unique(arrivals.sub$longitude),
                   y = unique(arrivals.sub$latitude),
                   color = as.factor(unique(id)),
                   size = 3),
               data = arrivals.sub) +
    guides(size = FALSE,
           color = FALSE)
ggsave(filename = "map_top7.pdf")

## this one is terrific
ggplot(data = arrivals.sub,
       aes(x = hour, y = arrivals,
           color = as.factor(id),
           group = weekend)) +
    geom_point() +
    facet_grid(facets = id ~ weekend) +
    geom_smooth()
ggsave(filename = "top7_average_day.pdf")

ggplot(data = arrivals.sub,
       aes(x = hour, y = arrivals,
           color = as.factor(id),
           group = weekend)) +
    geom_jitter(alpha = 0.2) +
    geom_smooth(aes(group = as.factor(id)))

library(lme4)

system.time(
    bike.glm <- glm(arrivals ~
                    bs(hour, degree = 4)*weekend
                    ## + latitude
                    ## + longitude
                    + as.factor(id)
                    ,
                    data = arrivals.sub,
                    family = "poisson")
    )
summary(bike.glm)

## system.time(
##     bike.big.glm <- glm(arrivals ~
##                            bs(hour, degree = 4)*weekend
##                            + (1|id)
##                            + (bs(hour, degree = 4)|id),
##                            data = arrivals.sub,
##                            family = "poisson")
##     )
## summary(bike.big.glm)

system.time(
    bike.glmm <- glmer(arrivals ~
                       bs(hour, degree = 4)*weekend
                       + (1|id),
                       data = arrivals.sub,
                       family = "poisson")
    )
summary(bike.glmm)

## ~3 minutes
system.time(
    bike.big.glmm <- glmer(arrivals ~
                           bs(hour, degree = 4)*weekend
                           + (1|id)
                           + (bs(hour, degree = 4)|id),
                           data = arrivals.sub,
                           family = "poisson")
    )
summary(bike.big.glmm)


## residuals
ggplot(data = arrivals.sub,
       aes(x = hour,
           y = abs(fitted(bike.glmm) - arrivals))) +
    geom_point(aes(color = as.factor(id))) +
    geom_smooth(aes(group = weekend))

## fitted values
ggplot(data = arrivals.sub,
       aes(x = hour,
           y = fitted(big.bike.glmm),
           color = id,
           group = weekend)) +
    geom_path(aes(color = as.factor(id),
                   pch = weekend))

## fitted values
ggplot(data = arrivals.sub,
       aes(x = hour,
           y = fitted(bike.big.glmm),
           color = id,
           group = weekend)) +
    geom_smooth(aes(color = as.factor(id),
                   pch = weekend)) +
    facet_grid(facets = id ~ .)

